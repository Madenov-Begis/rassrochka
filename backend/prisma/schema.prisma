// schema.prisma: Схема БД для системы рассрочки. Добавлено поле managerId в Installment для связи с менеджером магазина. User, Installment. 2024-07-17
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  login     String   @unique
  password  String
  role      Role
  storeId   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  store     Store?   @relation(fields: [storeId], references: [id])
  status    UserStatus @default(active)
  installments Installment[]

  @@map("users")
}

model Store {
  id           Int           @id @default(autoincrement())
  name         String
  address      String
  phone        String
  status       StoreStatus   @default(active)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  customers    Customer[]
  installments Installment[]
  users        User[]

  @@map("stores")
}

model Customer {
  id             Int           @id @default(autoincrement())
  firstName      String
  lastName       String
  middleName     String?
  passportSeries String
  passportNumber String
  phone          String
  address        String
  isBlacklisted  Boolean       @default(false)
  storeId        Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  store          Store         @relation(fields: [storeId], references: [id])
  installments   Installment[]

  @@unique([passportSeries, passportNumber])
  @@map("customers")
}

model Installment {
  id             Int               @id @default(autoincrement())
  productName    String
  productPrice   Decimal           @db.Decimal(10, 2)
  downPayment    Decimal           @db.Decimal(10, 2)
  interestRate   Decimal           @db.Decimal(5, 2)
  months         Int
  totalAmount    Decimal           @db.Decimal(10, 2)
  monthlyPayment Decimal           @db.Decimal(10, 2)
  status         InstallmentStatus @default(active)
  customerId     Int
  storeId        Int
  managerId      Int?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  customer       Customer          @relation(fields: [customerId], references: [id])
  store          Store             @relation(fields: [storeId], references: [id])
  manager        User?             @relation(fields: [managerId], references: [id])
  payments       Payment[]

  @@map("installments")
}

model Payment {
  id            Int           @id @default(autoincrement())
  amount        Decimal       @db.Decimal(10, 2)
  dueDate       DateTime
  paidDate      DateTime?
  status        PaymentStatus @default(pending)
  installmentId Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  installment   Installment   @relation(fields: [installmentId], references: [id])
  paymentHistory PaymentHistory[]
  type          PaymentType   @default(ordinary)

  @@map("payments")
}

model PaymentHistory {
  id         Int      @id @default(autoincrement())
  paymentId  Int
  amount     Decimal  @db.Decimal(10, 2)
  paidDate   DateTime @default(now())
  payment    Payment  @relation(fields: [paymentId], references: [id])
}

enum Role {
  admin
  store_manager
}

enum StoreStatus {
  active
  inactive
}

enum InstallmentStatus {
  active
  completed
  overdue
  early_payoff
}

enum PaymentStatus {
  pending
  paid
  overdue
  cancelled
}

enum UserStatus {
  active
  inactive
  blocked
}

enum PaymentType {
  ordinary
  early_payoff
}
